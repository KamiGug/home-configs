#!/usr/bin/env bash
# This script was generated by bashly 1.2.12 (https://bashly.dev)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
installer_usage() {
  printf "installer - CLI tool to install tools needed for my config\n\n"

  printf "%s\n" "Usage:"
  printf "  installer COMMAND\n"
  printf "  installer [COMMAND] --help | -h\n"
  printf "  installer --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   Install the latest version of Neovim\n" "nvim    "
  printf "  %s   Build all of the bashly CLI tools\n" "commands"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "INSTALL_DIR"
    printf "    Choose installation directory\n"
    printf "    %s\n" "Default: /usr/local/manual"
    echo

    # :environment_variable.usage
    printf "  %s\n" "LINK_DIR"
    printf "    Choose link directory\n"
    printf "    %s\n" "Default: /usr/local/bin"
    echo

  fi
}

# :command.usage
installer_nvim_usage() {
  printf "installer nvim - Install the latest version of Neovim\n\n"

  printf "%s\n" "Usage:"
  printf "  installer nvim [VERSION] [OPTIONS]\n"
  printf "  installer nvim --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--dir, -d PATH"
    printf "    Installation directory (default: $INSTALL_DIR or /usr/local/manual)\n"
    echo

    # :flag.usage
    printf "  %s\n" "--link, -l PATH"
    printf "    Symlink path (defaults to $LINK_DIR/nvim)\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "VERSION"
    printf "    Version to install (default: latest)\n"
    echo

  fi
}

# :command.usage
installer_commands_usage() {
  printf "installer commands - Build all of the bashly CLI tools\n\n"

  printf "%s\n" "Usage:"
  printf "  installer commands [OPTIONS]\n"
  printf "  installer commands --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--source, -s SOURCE"
    printf "    Set the source directory\n"
    echo

    # :flag.usage
    printf "  %s\n" "--out, -o OUT"
    printf "    Set the output script directory\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "SOURCE_DIR"
    printf "    Directory that contains all of the bashly projects to build\n"
    printf "    %s\n" "Default: $HOME/.shell/scripts/.src/bash"
    echo

    # :environment_variable.usage
    printf "  %s\n" "SCRIPTS_DIR"
    printf "    Directory holding the executables (needs to be in path)\n"
    printf "    %s\n" "Default: $HOME/.shell/scripts"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions
# :command.function
installer_nvim_command() {

  # src/nvim_command.sh
  #!/usr/bin/env bash

  set -e

  VERSION="${args[version]}"

  INSTALL_DIR="${INSTALL_DIR:-/usr/local/manual}"
  if [[ -n "${args[--dir]}" ]]; then
    INSTALL_DIR="${args[--dir]}"
  fi

  sudo echo ''

  LINK_PATH="${LINK_DIR/nvim:-/usr/local/bin/nvim}"
  if [[ -n "${args[--link]}" ]]; then
    LINK_PATH="${args[--link]}"
  fi

  if [[ "$(uname -s)" != "Linux" ]]; then
    echo "This installer only supports Linux."
    exit 1
  fi

  case "$(uname -m)" in
    x86_64|amd64) ARCH="x86_64" ;;
    arm64|aarch64) ARCH="arm64" ;;
    *) echo "Unsupported architecture: $(uname -m)"; exit 1 ;;
  esac

  if [[ "$ARCH" == "x86_64" ]]; then
    ASSET="nvim-linux-x86_64.tar.gz"
  elif [[ "$ARCH" == "arm64" ]]; then
    ASSET="nvim-linux-arm64.tar.gz"
  fi

  if [[ -z "$VERSION" || "$VERSION" == "latest" ]]; then
    echo "Fetching latest Neovim version..."
    VERSION=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest \
      | grep '"tag_name":' \
      | sed -E 's/.*"v([^"]+)".*/\1/')
  fi

  echo "Installing Neovim v${VERSION} for Linux-${ARCH}..."
  echo "Target directory: $INSTALL_DIR"
  echo "Symlink path: $LINK_PATH"

  TMP_DIR=$(mktemp -d)
  cd "$TMP_DIR"

  DOWNLOAD_URL="https://github.com/neovim/neovim/releases/download/v${VERSION}/${ASSET}"

  echo "Downloading from: $DOWNLOAD_URL"
  curl -LO "$DOWNLOAD_URL"

  echo "Extracting..."
  tar xzf "$ASSET"

  sudo rm -rf "$INSTALL_DIR/nvim"
  sudo mkdir -p "$INSTALL_DIR/nvim"

  sudo rm "${ASSET}"
  sudo mv nvim-linux*/* "$INSTALL_DIR/nvim"

  sudo mkdir -p "$(dirname "$LINK_PATH")"
  sudo ln -sf "$INSTALL_DIR/nvim/bin/nvim" "$LINK_PATH"

  echo "Cleaning up..."
  cd ~
  rm -rf "$TMP_DIR"

  echo "Neovim v${VERSION} installed successfully!"

}

# :command.function
installer_commands_command() {

  # src/commands_command.sh
  #!/usr/bin/env bash
  set -e

  SOURCE_DIR="${SOURCE_DIR:-$HOME/.shell/scripts/.src}"
  SCRIPTS_DIR="${SCRIPTS_DIR:-$HOME/.shell/scripts}"

  if [[ -n "${args[--source]}" ]]; then
    SOURCE_DIR="${args[--source]}"
  fi
  if [[ -n "${args[--out]}" ]]; then
    SCRIPTS_DIR="${args[--out]}"
  fi

  echo "Scanning for Bashly projects in: $SOURCE_DIR"

  if [[ ! -d "$SOURCE_DIR" ]]; then
    echo "Invalid source directory: $SOURCE_DIR"
    exit 1
  fi

  found_any=false

  for project_dir in "$SOURCE_DIR"/*; do
    if [[ -d "$project_dir/src" && -f "$project_dir/src/bashly.yml" ]]; then
      found_any=true
      echo "Processing project: $project_dir"

      (
        cd "$project_dir"
        app_name=$(grep -E '^name:' src/bashly.yml | head -n 1 | awk '{print $2}')

        if [[ -z "$app_name" ]]; then
          echo "Could not determine app name in $project_dir/src/bashly.yml"
          exit 1
        fi

        echo "Generating Bashly app '$app_name'..."
        bashly generate

        if [[ ! -f "$project_dir/$app_name" ]]; then
          echo "Expected generated file '$app_name' not found"
          exit 1
        fi

        echo "Installing to $SCRIPTS_DIR/$app_name"
        mkdir -p "$SCRIPTS_DIR"
        mv "$app_name" "$SCRIPTS_DIR/$app_name"
        chmod +x "$SCRIPTS_DIR/$app_name"
      )
    fi
  done

  if ! $found_any; then
    echo "No Bashly projects found in $SOURCE_DIR"
  fi

  echo " Done building all Bashly apps."

}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        installer_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export INSTALL_DIR="${INSTALL_DIR:-/usr/local/manual}"
  export LINK_DIR="${LINK_DIR:-/usr/local/bin}"

  env_var_names+=("INSTALL_DIR")
  env_var_names+=("LINK_DIR")

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    nvim)
      action="nvim"
      shift
      installer_nvim_parse_requirements "$@"
      shift $#
      ;;

    commands)
      action="commands"
      shift
      installer_commands_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      installer_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
installer_nvim_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        installer_nvim_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="nvim"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --dir | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--dir']="$2"
          shift
          shift
        else
          printf "%s\n" "--dir requires an argument: --dir, -d PATH" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --link | -l)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--link']="$2"
          shift
          shift
        else
          printf "%s\n" "--link requires an argument: --link, -l PATH" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['version']+x} ]]; then
          args['version']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

# :command.parse_requirements
installer_commands_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --help | -h)
        long_usage=yes
        installer_commands_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export SOURCE_DIR="${SOURCE_DIR:-$HOME/.shell/scripts/.src/bash}"
  export SCRIPTS_DIR="${SCRIPTS_DIR:-$HOME/.shell/scripts}"

  env_var_names+=("SOURCE_DIR")
  env_var_names+=("SCRIPTS_DIR")

  # :command.command_filter
  action="commands"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --source | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--source']="$2"
          shift
          shift
        else
          printf "%s\n" "--source requires an argument: --source, -s SOURCE" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --out | -o)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--out']="$2"
          shift
          shift
        else
          printf "%s\n" "--out requires an argument: --out, -o OUT" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  declare -g version="0.3.0"
  set -e

  # :command.environment_variables_default
  export INSTALL_DIR="${INSTALL_DIR:-/usr/local/manual}"
  export LINK_DIR="${LINK_DIR:-/usr/local/bin}"

}

# :command.run
run() {
  # :command.globals
  declare -g long_usage=''
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "nvim") installer_nvim_command ;;
    "commands") installer_commands_command ;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  initialize
  run "$@"
fi
